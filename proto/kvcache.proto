syntax = "proto3";

package sldmkvcachestore;

// Service definition for KVCache operations
service KVCacheService {
  // Key-value operations
  rpc Put(PutRequest) returns (PutResponse);
  rpc Get(GetRequest) returns (GetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc Scan(ScanRequest) returns (ScanResponse);
  
  // Raft cluster management
  rpc AddNode(AddNodeRequest) returns (AddNodeResponse);
  rpc RemoveNode(RemoveNodeRequest) returns (RemoveNodeResponse);
  rpc GetClusterInfo(ClusterInfoRequest) returns (ClusterInfoResponse);
  
  // VLLM KVCache connector interface
  rpc StoreKVCache(StoreKVCacheRequest) returns (StoreKVCacheResponse);
  rpc RetrieveKVCache(RetrieveKVCacheRequest) returns (RetrieveKVCacheResponse);
  rpc DeleteKVCache(DeleteKVCacheRequest) returns (DeleteKVCacheResponse);
  rpc ListKVCacheKeys(ListKVCacheKeysRequest) returns (ListKVCacheKeysResponse);
}

// Basic key-value pair structure
message KeyValue {
  string key = 1;
  bytes value = 2;
}

// Request/Response for Put operation
message PutRequest {
  string key = 1;
  bytes value = 2;
}

message PutResponse {
  bool success = 1;
  string error_message = 2;
}

// Request/Response for Get operation
message GetRequest {
  string key = 1;
}

message GetResponse {
  bool success = 1;
  bytes value = 2;
  string error_message = 3;
}

// Request/Response for Delete operation
message DeleteRequest {
  string key = 1;
}

message DeleteResponse {
  bool success = 1;
  string error_message = 2;
}

// Request/Response for Scan operation
message ScanRequest {
  string start_key = 1;
  string end_key = 2;
  int32 limit = 3;
}

message ScanResponse {
  bool success = 1;
  repeated KeyValue kvs = 2;
  string error_message = 3;
}

// Raft cluster management messages
message AddNodeRequest {
  string node_id = 1;
  string endpoint = 2;
}

message AddNodeResponse {
  bool success = 1;
  string error_message = 2;
}

message RemoveNodeRequest {
  string node_id = 1;
}

message RemoveNodeResponse {
  bool success = 1;
  string error_message = 2;
}

message ClusterInfoRequest {
}

message ClusterInfoResponse {
  bool success = 1;
  string leader_id = 2;
  repeated NodeInfo nodes = 3;
  string error_message = 4;
}

message NodeInfo {
  string node_id = 1;
  string endpoint = 2;
  bool is_leader = 3;
  string status = 4;
}

// VLLM KVCache connector interface messages
message StoreKVCacheRequest {
  // Unique identifier for this KV cache set
  string cache_id = 1;
  // Metadata about the model and tokens
  string model_id = 2;
  uint64 seq_id = 3;
  uint64 num_tokens = 4;
  // The actual KV cache data
  bytes kv_cache_data = 5;
  // Optional expiration time in seconds
  uint64 expiration_seconds = 6;
}

message StoreKVCacheResponse {
  bool success = 1;
  string error_message = 2;
}

message RetrieveKVCacheRequest {
  string cache_id = 1;
}

message RetrieveKVCacheResponse {
  bool success = 1;
  bytes kv_cache_data = 2;
  string model_id = 3;
  uint64 seq_id = 4;
  uint64 num_tokens = 5;
  string error_message = 6;
}

message DeleteKVCacheRequest {
  string cache_id = 1;
}

message DeleteKVCacheResponse {
  bool success = 1;
  string error_message = 2;
}

message ListKVCacheKeysRequest {
  string prefix = 1;
  int32 limit = 2;
}

message ListKVCacheKeysResponse {
  bool success = 1;
  repeated string cache_ids = 2;
  string error_message = 3;
} 