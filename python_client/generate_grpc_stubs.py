#!/usr/bin/env python3
"""
Generate Python gRPC stubs from proto definitions.

This script generates Python gRPC client code from the proto definitions
used by the SLDMKVCacheStore.

Design Concept:
--------------
This script follows these design principles:
1. Robustness - Handles errors gracefully and provides detailed error messages
2. Discoverability - Automatically finds proto files in the expected location
3. Safety - Creates directories as needed and doesn't overwrite important files
4. Completeness - Fixes import statements in generated files to make them compatible with Python packages
5. Usability - Provides clear, colorful output to improve user experience

The script is an alternative to the shell script (generate_stubs.sh) and is particularly
useful for users who prefer Python or are working in environments where shell scripts
are not convenient to use.
"""

import os
import sys
import subprocess
import glob
from pathlib import Path
import traceback
import colorama
from colorama import Fore, Style

# Initialize colorama for cross-platform colored output
colorama.init()


def print_header(title):
    """Print a formatted header with the given title."""
    border = "=" * (len(title) + 10)
    print(f"\n{Style.BRIGHT}{border}{Style.RESET_ALL}")
    print(f"{Style.BRIGHT}    {title}    {Style.RESET_ALL}")
    print(f"{Style.BRIGHT}{border}{Style.RESET_ALL}\n")


def print_info(msg):
    """Print an info message with appropriate formatting."""
    print(f"{Fore.BLUE}{Style.BRIGHT}[INFO]{Style.RESET_ALL} {msg}")


def print_success(msg):
    """Print a success message with appropriate formatting."""
    print(f"{Fore.GREEN}{Style.BRIGHT}[SUCCESS]{Style.RESET_ALL} {msg}")


def print_warning(msg):
    """Print a warning message with appropriate formatting."""
    print(f"{Fore.YELLOW}{Style.BRIGHT}[WARNING]{Style.RESET_ALL} {msg}")


def print_error(msg):
    """Print an error message with appropriate formatting."""
    print(f"{Fore.RED}{Style.BRIGHT}[ERROR]{Style.RESET_ALL} {msg}")


def ensure_directory(directory):
    """
    Ensure that the given directory exists, creating it if necessary.
    
    Args:
        directory: Directory path to check/create
        
    Returns:
        True if the directory exists or was created, False otherwise
    """
    try:
        os.makedirs(directory, exist_ok=True)
        return True
    except Exception as e:
        print_error(f"Failed to create directory {directory}: {e}")
        return False


def ensure_package_init(directory):
    """
    Ensure that the given directory has an __init__.py file.
    
    Args:
        directory: Directory path to check/create __init__.py in
        
    Returns:
        True if the __init__.py file exists or was created, False otherwise
    """
    init_file = os.path.join(directory, "__init__.py")
    if not os.path.exists(init_file):
        try:
            with open(init_file, 'w') as f:
                f.write("# Generated by SLDMKVCacheStore Python gRPC Stub Generator\n")
            print_info(f"Created __init__.py in {directory}")
            return True
        except Exception as e:
            print_error(f"Failed to create __init__.py in {directory}: {e}")
            return False
    return True


def generate_stubs():
    """
    Generate Python gRPC stubs from proto files.
    
    This function:
    1. Locates the proto directory
    2. Finds all proto files in that directory
    3. Sets up the output directory
    4. Runs protoc for each proto file
    5. Fixes imports in the generated files
    
    Returns:
        True if the stub generation was successful, False otherwise
    """
    print_header("SLDMKVCacheStore Python gRPC Stub Generator")
    
    try:
        # Get the absolute path to the proto directory
        print_info("Setting up environment...")
        script_dir = Path(__file__).resolve().parent
        workspace_dir = script_dir.parent
        proto_dir = workspace_dir / "proto"
        output_dir = script_dir / "sldmkvcachestore"
        
        print_info("Working directories:")
        print(f"  - Script directory: {script_dir}")
        print(f"  - Proto directory: {proto_dir}")
        print(f"  - Output directory: {output_dir}")
        
        # Check if proto directory exists
        if not proto_dir.exists():
            print_error(f"Proto directory not found at {proto_dir}")
            print_error("Please make sure the proto directory exists in the repository.")
            return False
        
        # Create output directory if it doesn't exist
        if not ensure_directory(output_dir):
            return False
        
        # Make sure it's a proper Python package
        if not ensure_package_init(output_dir):
            return False
        
        # Find all proto files
        proto_files = list(proto_dir.glob("*.proto"))
        if not proto_files:
            print_error(f"No proto files found in {proto_dir}")
            print_error("Please make sure the proto files exist in the repository.")
            return False
        
        # Print the proto files we found
        print_info(f"Found {len(proto_files)} proto files:")
        for proto_file in proto_files:
            print(f"  - {proto_file.name}")
        
        # Run protoc for each proto file
        print_info("Generating Python gRPC stubs...")
        for proto_file in proto_files:
            print_info(f"Processing {proto_file.name}...")
            cmd = [
                "python", "-m", "grpc_tools.protoc",
                f"--proto_path={proto_dir}",
                f"--python_out={output_dir}",
                f"--grpc_python_out={output_dir}",
                str(proto_file)
            ]
            
            try:
                result = subprocess.run(cmd, check=True, capture_output=True)
                print_success(f"Generated stubs for {proto_file.name}")
            except subprocess.CalledProcessError as e:
                print_error(f"Failed to generate stubs for {proto_file.name}:")
                print_error(f"{e.stderr.decode()}")
                return False
        
        # Fix imports in generated files
        fix_imports(output_dir)
        
        print_success("\nStub generation completed successfully!")
        print_info(f"Generated files are in: {output_dir}")
        print_header("Ready to use!")
        return True
        
    except Exception as e:
        print_error(f"Unexpected error during stub generation: {e}")
        print_error(traceback.format_exc())
        return False


def fix_imports(output_dir):
    """
    Fix import statements in generated Python files.
    
    This is necessary because the generated code uses absolute imports, but we
    want to use relative imports within our package.
    
    Args:
        output_dir: Directory containing the generated files
    """
    print_info("\nFixing import statements in generated files...")
    
    # Find all generated Python files
    pb2_files = glob.glob(os.path.join(output_dir, "*_pb2.py"))
    pb2_grpc_files = glob.glob(os.path.join(output_dir, "*_pb2_grpc.py"))
    
    fixed_files = 0
    
    # Fix imports in *_pb2_grpc.py files
    for pb2_grpc_file in pb2_grpc_files:
        filename = os.path.basename(pb2_grpc_file)
        pb2_filename = filename.replace("_grpc", "")
        
        print_info(f"Checking imports in {filename}...")
        
        with open(pb2_grpc_file, 'r') as f:
            content = f.read()
        
        # Check if the file needs modification
        if f"import {pb2_filename}" in content:
            # Replace "import X_pb2" with "from . import X_pb2"
            new_content = content.replace(
                f"import {pb2_filename}", 
                f"from . import {pb2_filename}"
            )
            
            with open(pb2_grpc_file, 'w') as f:
                f.write(new_content)
                
            fixed_files += 1
            print_success(f"Updated imports in {filename}")
        else:
            print_warning(f"No import statements to fix in {filename}")
    
    if fixed_files > 0:
        print_success(f"Fixed imports in {fixed_files} files.")
    else:
        print_warning("No files needed import fixes.")


if __name__ == "__main__":
    try:
        import grpc_tools.protoc
    except ImportError:
        print_error("grpcio-tools package not installed.")
        print_error("Please install it with: pip install grpcio-tools")
        sys.exit(1)
    
    if generate_stubs():
        sys.exit(0)
    else:
        sys.exit(1) 